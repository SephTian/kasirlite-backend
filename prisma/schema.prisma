generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model menu {
  id               BigInt             @id @default(autoincrement())
  menu_type_id     BigInt
  name             String             @db.VarChar(100)
  price            Decimal            @default(0) @db.Decimal(10, 0)
  discount         Decimal            @default(0) @db.Decimal(10, 0)
  disabled         Boolean            @default(false)
  has_additional   Boolean?           @default(true)
  image            String?
  menu_type        menu_type          @relation(fields: [menu_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_additional order_additional[]
  order_detail     order_detail[]
}

model menu_type {
  id            BigInt  @id @default(autoincrement())
  name          String  @db.VarChar(50)
  is_additional Boolean @default(false)
  menu          menu[]
}

model order {
  id            BigInt            @id @default(autoincrement())
  user_id       BigInt
  customer_name String            @db.VarChar(100)
  date          DateTime          @db.Timestamp(6)
  discount      Decimal           @default(0) @db.Decimal(10, 0)
  total_price   Decimal           @db.Decimal(10, 0)
  tax           Decimal           @default(0) @db.Decimal(10, 0)
  note          String?
  status        order_status_enum
  type          order_type_enum
  user          user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_detail  order_detail[]
  payment       payment[]
}

model order_additional {
  id              BigInt       @id @default(autoincrement())
  order_detail_id BigInt
  menu_id         BigInt
  sub_price       Decimal      @default(0) @db.Decimal(10, 3)
  menu            menu         @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_detail    order_detail @relation(fields: [order_detail_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order_detail {
  id               BigInt             @id @default(autoincrement())
  menu_id          BigInt?
  order_id         BigInt
  quantity         Decimal            @default(0) @db.Decimal
  sub_price        Decimal            @default(0) @db.Decimal(10, 3)
  menu_name        String             @db.VarChar(200)
  order_additional order_additional[]
  menu             menu?              @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order            order              @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payment {
  id              BigInt       @id @default(autoincrement())
  payment_type_id BigInt
  order_id        BigInt
  name            String       @db.VarChar
  payment         Decimal      @default(0) @db.Decimal(10, 3)
  proof           String?
  date            DateTime     @db.Timestamp(6)
  order           order        @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_type    payment_type @relation(fields: [payment_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payment_type {
  id      BigInt    @id @default(autoincrement())
  name    String    @db.VarChar(50)
  tax     Decimal   @default(0) @db.Decimal(10, 0)
  payment payment[]
}

model role {
  id   BigInt @id @default(autoincrement())
  name String @db.VarChar(20)
  user user[]
}

model user {
  id         BigInt    @id @default(autoincrement())
  name       String    @db.VarChar
  email      String    @db.VarChar
  password   String    @db.VarChar(100)
  updated_at DateTime? @db.Timestamp(6)
  created_at DateTime? @db.Timestamp(6)
  role_id    BigInt?
  order      order[]
  role       role?     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum order_status_enum {
  BELUM_BAYAR
  BELUM_LUNAS
  LUNAS
  DIBATALKAN
}

enum order_type_enum {
  DIBUNGKUS
  DITEMPAT
  DIANTAR
}
